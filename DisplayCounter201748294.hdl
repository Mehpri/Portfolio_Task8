CHIP DisplayCounter201748294 {
    IN inc, reset;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Input inversions
   Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    // Segment a
    And(a=notB, b=C, out=a1);
    And(a=A, b=notB, out=a2);
    And(a=notA, b=B, out=a3t);
    And(a=a3t, b=notC, out=a3);
    And(a=C, b=notD, out=a4);
    And(a=A, b=D, out=a5);
    Or(a=a1, b=a2, out=ao1);
    Or(a=a3, b=a4, out=ao2);
    Or(a=ao1, b=ao2, out=ao3);
    Or(a=ao3, b=a5, out=a);

    // Segment b
    And(a=B, b=notC, out=b1t);
    And(a=b1t, b=D, out=b1);
    And(a=A, b=notB, out=b2t);
    And(a=b2t, b=D, out=b2);
    And(a=notA, b=notB, out=b3t);
    And(a=b3t, b=notD, out=b3);
    And(a=B, b=C, out=b4t);
    And(a=b4t, b=notD, out=b4);
    And(a=A, b=notC, out=b5);
    And(a=notA, b=notB, out=b6t);
    And(a=b6t, b=C, out=b6);
    Or(a=b1, b=b2, out=bo1);
    Or(a=b3, b=b4, out=bo2);
    Or(a=b5, b=b6, out=bo3);
    Or(a=bo1, b=bo2, out=bo4);
    Or(a=bo4, b=bo3, out=b);

    // Segment c
    And(a=notA, b=notC, out=c1t);
    And(a=c1t, b=notD, out=c1);
    And(a=notA, b=C, out=c2t);
    And(a=c2t, b=D, out=c2);
    And(a=notB, b=notD, out=c3);
    And(a=A, b=notC, out=c4t);
    And(a=c4t, b=D, out=c4);
    And(a=notA, b=notB, out=c5);
    Or(a=c1, b=c2, out=co1);
    Or(a=c3, b=c4, out=co2);
    Or(a=co1, b=co2, out=co3);
    Or(a=co3, b=c5, out=c);

    // Segment d
    And(a=notB, b=notD, out=d1);
    And(a=notA, b=C, out=d2);
    And(a=notA, b=B, out=d3t);
    And(a=d3t, b=D, out=d3);
    And(a=A, b=notB, out=d4t);
    And(a=d4t, b=notC, out=d4);
    And(a=A, b=notD, out=d5);
    And(a=B, b=C, out=d6);
    Or(a=d1, b=d2, out=do1);
    Or(a=d3, b=d4, out=do2);
    Or(a=d5, b=d6, out=do3);
    Or(a=do1, b=do2, out=do4);
    Or(a=do4, b=do3, out=d);

    // Segment e
    And(a=B, b=notD, out=e1);
    And(a=notA, b=B, out=e2t);
    And(a=e2t, b=notC, out=e2);
    And(a=notC, b=notD, out=e3);
    And(a=A, b=notB, out=e4);
    And(a=A, b=C, out=e5);
    Or(a=e1, b=e2, out=eo1);
    Or(a=e3, b=e4, out=eo2);
    Or(a=eo1, b=eo2, out=eo3);
    Or(a=eo3, b=e5, out=e);

    // Segment f
    And(a=C, b=notD, out=f1);
    And(a=A, b=C, out=f2);
    And(a=A, b=B, out=f3);
    And(a=notB, b=notC, out=f4t);
    And(a=f4t, b=notD, out=f4);
    Or(a=f1, b=f2, out=fo1);
    Or(a=f3, b=f4, out=fo2);
    Or(a=fo1, b=fo2, out=f);

    // Segment g
    And(a=notA, b=B, out=g1);
    And(a=A, b=notB, out=g2);
    And(a=notC, b=D, out=g3);
    And(a=notA, b=notC, out=g4);
    And(a=notA, b=D, out=g5);
    Or(a=g1, b=g2, out=go1);
    Or(a=g3, b=g4, out=go2);
    Or(a=go1, b=go2, out=go3);
    Or(a=go3, b=g5, out=g);

    // Counter logic
    Mux16(a=prev, b=next, sel=inc, out=muxOut);
    Mux16(a=muxOut, b=false, sel=reset, out=newState);
    Register(in=newState, load=true, out[0]=D, out[1]=C, out[2]=B, out[3]=A, out=prev);
    Inc16(in=prev, out=next);
}