CHIP DisplayCounter201748294 {
IN inc, reset;
OUT a , b , c , d , e , f , g;

PARTS:
// All nots declared
Not(in = A, out = NotA);
Not(in = B, out = NotB);
Not(in = C, out = NotC);
Not(in = D, out = NotD);

// A chip
// B'C
And(a = NotB, b = C, out = term1a);

// AB'
And(a = A, b = NotB, out = term2a);

// A'BC'
And(a = NotA, b = B, out = term3p1a);
And(a = term3p1a, b = NotC, out = term3a);

// CD'
And(a = C, b = NotD, out = term4a);

// AD 
And(a = A, b = D, out = term5a);

// Final expression
Or(a = term1a, b = term2a, out = p1a);
Or(a = term3a, b = term4a, out = p2a);
Or(a = p1a, b = p2a, out = p3a);
Or(a = p3a, b = term5a, out = a);

// B chip
// BC'D -
And(a = B, b = NotC, out = term1p1b);
And(a = term1p1b, b = D, out = term1b);

// AB'D -
And(a = A, b = NotB, out = term2p1b);
And(a = term2p1b, b = D, out = term2b);

// A'B'D' -
And(a = NotA, b = NotB, out = term3p1b);
And(a = term3p1b, b = NotD, out = term3b);

// BCD'-
And(a = B, b = C, out = term4p1b);
And(a = term4p1b, b = NotD, out = term4b);

// AC' - 
And(a = A, b = NotC, out = term5b);

// A'B'C
And(a = NotA, b = NotB, out = term6p1b);
And(a = term6p1b, b = C, out = term6b);

// Final expression
Or(a = term1b, b = term2b, out = p1b);
Or(a = term3b, b = term4b, out = p2b);
Or(a = term5b, b = term6b, out = p3b);
Or(a = p1b, b = p2b, out = p4b);
Or(a = p4b, b = p3b, out = b);


// C chip
//A'C'D'
And(a = NotA, b = NotC, out = term1p1c);
And(a = term1p1c, b = NotD, out = term1c);

// A'CD
And(a = NotA, b = C, out = term2p1c);
And(a = term2p1c, b = D, out = term2c);

// B'D'
And(a = NotB, b = NotD, out = term3c);

// AC'D
And(a = A, b = NotC, out = term4p1c);
And(a = term4p1c, b = D, out = term4c);

// A'B'
And(a = NotA, b = NotB, out = term5c);

// Final expression
Or(a = term1c, b = term2c, out = p1c);
Or(a = term3c, b = term4c, out = p2c);
Or(a = p1c, b = p2c, out = p3c);
Or(a = p3c, b = term5c, out = c);


// D chip 
// B'D'
And(a = NotB, b = NotD, out = term1d);

// A'C
And(a = NotA, b = C, out = term2d);

// A'BD
And(a = NotA, b = B, out = term3p1d);
And(a = term3p1d, b = D, out = term3d);

// AB'C'
And(a = A, b = NotB, out = term4p1d);
And(a = term4p1d, b = NotC, out = term4d);

// AD'
And(a = A, b = NotD, out = term5d);

//BC
And(a = B, b = C, out = term6d);

// Final expression
Or(a = term1d, b = term2d, out = p1d);
Or(a = term3d, b = term4d, out = p2d);
Or(a = term5d, b = term6d, out = p3d);
Or(a = p1d, b = p2d, out = p4d);
Or(a = p4d, b = p3d, out = d);


// E chip
// BD'
And(a = B, b = NotD, out = term1e);

// A'BC'
And(a = NotA, b = B, out = term2p1e);
And(a = term2p1e, b = NotC, out = term2e);

// CD'
And(a = NotC, b = NotD, out = term3e);

// AB'
And(a = A, b = NotB, out = term4e);

// AC
And(a = A, b = C, out = term5e);

// Final expression
Or(a = term1e, b = term2e, out = p1e);
Or(a = term3e, b = term4e, out = p2e);
Or(a = p1e, b = p2e, out = p3e);
Or(a = p3e, b = term5e, out = e);


// F chip 
// C and Not D
And(a = C, b = NotD, out = term1f);

// AC
And(a = A, b = C, out = term2f);

// AB
And(a = A, b = B, out = term3f);

// B'C'D'
And(a = NotB, b = NotC, out = term4p1f);
And(a = term4p1f, b = NotD, out = term4f);

//Final expression
Or(a = term1f, b = term2f, out = p1f);
Or(a = term3f, b = term4f, out = p2f);
Or(a = p1f, b = p2f, out = f);


// G chip 
// A'B
And(a = NotA, b = B, out = term1g);

// AB'
And(a = A, b = NotB, out = term2g);

// C'D
And(a = NotC, b = D, out = term3g);

// A'C'
And(a = NotA, b = NotC, out = term4g);

// A'D
And(a = NotA, b = D, out = term5g);

// Final expression
Or(a = term1g, b = term2g, out = p1g);
Or(a = term3g, b = term4g, out = p2g);
Or(a = p1g, b = p2g, out = p3g);
Or(a = p3g, b = term5g, out = g);

Mux16(a = pl, b = lp, sel = inc, out = plz);
Mux16(a = plz, b = false, sel = reset, out = pln);
Register(in = pln, load = true, out[0] = D, out[1] = C, out[2] = B, out[3] = A, out = pl);
Inc16(in =pl, out = lp);
} 